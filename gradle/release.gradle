def isCiBuild = System.getenv('CI') != null
def isReleaseBuild = System.getProperty('release') != null
if (isCiBuild) {
	def buildNumber = java.time.format.DateTimeFormatter.ofPattern('yyyyMMddHHmmss').format(grgit.head().dateTime)
	version "1.0.${buildNumber}"
}

// com.gradle.plugin-publish
pluginBundle {
	website = "https://github.com/keykey7/gradle-spawn-plugin"
	vcsUrl = "${website}.git"
	description = 'Spawn and kill UNIX processes with up-to-date checks.'
	tags = ['unix', 'spawn', 'fork', 'process', 'kill']
}

// maven-publish
task srcJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}
task docJar(type: Jar, dependsOn: groovydoc) {
	from groovydoc.destinationDir
	classifier = 'doc'
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact srcJar
			artifact docJar
			pom {
				name = project.name
				description = project.pluginBundle.description
				url = project.pluginBundle.website
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
			}
		}
	}
}

// bintray
bintray {
	user = 'kk7'
	key = System.getenv('BINTRAY_TOKEN')
	publications = project.publishing.publications.collect{ it.name }
	publish = isReleaseBuild

	pkg {
		repo = isReleaseBuild ? 'mvn-release' : 'mvn-snapshot'
		name = project.name
		desc = 'Gradle Spawn Plugin'

		websiteUrl = project.pluginBundle.website
		vcsUrl = project.pluginBundle.vcsUrl
		githubRepo = 'keykey7/gradle-spawn-plugin'
		licenses = ['Apache-2.0']
		labels = project.pluginBundle.tags
		version {
			name = project.version
			released = new Date()
			mavenCentralSync {
				sync = false
			}
		}
	}
}

bintrayUpload {
	dependsOn publishToMavenLocal
	doFirst {
		Objects.requireNonNull(apiKey, 'missing bintray token')
	}
}

if (isReleaseBuild) {
	System.setProperty("gradle.publish.key", System.getenv('GRADLE_PUBLISH_KEY'))
	System.setProperty("gradle.publish.secret", System.getenv('GRADLE_PUBLISH_SECRET'))
}
publishPlugins {
	enabled = isReleaseBuild
	mustRunAfter bintrayUpload
}

publish.dependsOn bintrayUpload, publishPlugins
